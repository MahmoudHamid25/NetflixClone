{
	"info": {
		"_postman_id": "0f858a1d-2579-4e5e-8b01-a11aa21ab850",
		"name": "Netflix API contract testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41006917",
		"_collection_link": "https://netflix-clone-2126.postman.co/workspace/Netflix-clone-Workspace~5dc0d2cb-e31d-4aca-8622-93c250f21461/collection/41006917-0f858a1d-2579-4e5e-8b01-a11aa21ab850?action=share&source=collection_link&creator=41006917"
	},
	"item": [
		{
			"name": "Auth testing",
			"item": [
				{
					"name": "Check for valid auth register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 201 (Created)",
									"pm.test(\"User is registered successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Check if the response contains the access and refresh tokens",
									"pm.test(\"Response contains access and refresh tokens\", function () {",
									"    pm.response.to.have.jsonBody('accessToken');",
									"    pm.response.to.have.jsonBody('refreshToken');",
									"    pm.expect(pm.response.json().accessToken).to.be.a('string');",
									"    pm.expect(pm.response.json().refreshToken).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Email contains @ and domain after it\", function () {",
									"    const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"    const email = requestBody.email;",
									"",
									"    // Check if the email contains '@' and a domain part",
									"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email must contain @ and a domain (e.g., user@example.com)\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"svi999@example.com\",\n  \"username\": \"svi999\",\n  \"password\": \"P@ssw0rd123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid auth login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code should be 201 or 401\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test successful login response",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Successful login response structure\", function () {",
									"        const response = pm.response.json();",
									"        ",
									"        pm.expect(response).to.have.property('accessToken').that.is.a('string');",
									"        pm.expect(response).to.have.property('refreshToken').that.is.a('string');",
									"        ",
									"        // Verify JWT format",
									"        const jwtRegex = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"        pm.expect(response.accessToken).to.match(jwtRegex);",
									"        pm.expect(response.refreshToken).to.match(jwtRegex);",
									"    });",
									"",
									"    // Store tokens",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"accessToken\", response.accessToken);",
									"    pm.environment.set(\"refreshToken\", response.refreshToken);",
									"}",
									"",
									"// Test unauthorized response",
									"if (pm.response.code === 401) {",
									"    pm.test(\"Unauthorized response structure\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('statusCode', 401);",
									"        pm.expect(response).to.have.property('error', 'Unauthorized');",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@gmail.com\",\n  \"password\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid auth logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"User successfully logs out\", function () {",
									"    pm.response.to.have.status(200); // Check if the response status is 200 (OK)",
									"    pm.response.to.have.jsonBody(\"message\"); // Ensure the response contains a message field",
									"    pm.expect(pm.response.json().message).to.eql(\"Logged out successfully\"); // Check if the message is \"Successfully logged out\"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcxMjE5ODksImV4cCI6MTczNzcyNjc4OX0.YHVmOJ8XJJn8pgSF-B9aHx7Cf1dMx9oA07Kix7blkdI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid auth profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required user profile fields\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    const requiredFields = [",
									"        'id',",
									"        'socialId',",
									"        'profileIcon',",
									"        'username',",
									"        'email',",
									"        'login_attempts',",
									"        'account_status',",
									"        'created_at',",
									"        'modified_at',",
									"        'refreshToken',",
									"        'role'",
									"    ];",
									"    ",
									"    requiredFields.forEach(field => {",
									"        pm.expect(response).to.have.property(field);",
									"    });",
									"});",
									"",
									"// Test data types",
									"pm.test(\"Data types are correct\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.email).to.be.a('string');",
									"    pm.expect(response.username).to.be.a('string');",
									"    pm.expect(response.login_attempts).to.be.a('number');",
									"    pm.expect(response.created_at).to.be.a('string');",
									"    pm.expect(response.modified_at).to.be.a('string');",
									"    pm.expect(response.refreshToken).to.be.a('string');",
									"});",
									"",
									"// Test account status values",
									"pm.test(\"Account status is valid\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.account_status).to.be.oneOf(['active', 'inactive']);",
									"});",
									"",
									"// Test refresh token format",
									"pm.test(\"RefreshToken is valid JWT format\", function () {",
									"    const response = pm.response.json();",
									"    const jwtRegex = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"    pm.expect(response.refreshToken).to.match(jwtRegex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcxMjE5ODksImV4cCI6MTczNzcyNjc4OX0.YHVmOJ8XJJn8pgSF-B9aHx7Cf1dMx9oA07Kix7blkdI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/auth/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid auth refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Ensure status code is 201 for valid refresh token",
									"pm.test(\"Status code is 200 for valid refresh token\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NjI1MzAsImV4cCI6MTczNjk2NjEzMH0.LGa2yhwa85_sF_cSKqyKSmFLsDjRo4h56eFpZJvpl8E",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcxMjE5ODksImV4cCI6MTczNzcyNjc4OX0.YHVmOJ8XJJn8pgSF-B9aHx7Cf1dMx9oA07Kix7blkdI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZjM1YjE4OS0zYTQ1LTQwYzQtODU2MS1hNGI1MTdhYjc0NmEiLCJlbWFpbCI6InN2aTk5QGV4YW1wbGUuY29tIiwicm9sZSI6IkFQSSIsImlhdCI6MTczNzEyMjg0MSwiZXhwIjoxNzM3NzI3NjQxfQ.VAVSFMXUwVoDiyx-vWG1oHTHftaXbWmYCtOujoaY-wo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/auth/refresh",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contents",
			"item": [
				{
					"name": "Films",
					"item": [
						{
							"name": "Check for valid film returm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Verify response structure",
											"pm.test(\"Response is an array of films\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(Array.isArray(response)).to.be.true;",
											"    pm.expect(response.length).to.be.at.least(1);",
											"});",
											"",
											"",
											"",
											"// Verify all films are of type 'film'",
											"pm.test(\"All items are of type 'film'\", function () {",
											"    const films = pm.response.json();",
											"    films.forEach((film, index) => {",
											"        pm.expect(film.type, `Film ${index} type`).to.equal('film');",
											"    });",
											"});",
											"",
											"",
											"// Save first film ID for other tests if needed",
											"if (pm.response.code === 200) {",
											"    const films = pm.response.json();",
											"    if (films.length > 0) {",
											"        pm.environment.set(\"testFilmId\", films[0].id);",
											"    }",
											"}",
											"",
											"// Schema validation",
											"const schema = {",
											"    type: 'array',",
											"    items: {",
											"        type: 'object',",
											"        required: ['id', 'title', 'type', 'description'],",
											"        properties: {",
											"            id: { type: 'string' },",
											"            title: { type: 'string' },",
											"            type: { type: 'string', enum: ['film'] },",
											"            description: { type: 'string' },",
											"            preview_image: { type: 'string', pattern: '^https?://.+' },",
											"            release_date: { type: 'string', format: 'date' },",
											"            subs: { type: 'object' },",
											"            dubs: { type: 'object' },",
											"            available_qualities: {",
											"                type: 'array',",
											"                items: { type: 'string' }",
											"            },",
											"            credits: { type: 'string' },",
											"            videoUrl: { type: 'string', pattern: '^https?://.+' }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"",
											"// Data consistency tests",
											"pm.test(\"Films data is consistent\", function() {",
											"    const films = pm.response.json();",
											"    ",
											"    films.forEach((film, index) => {",
											"        // Title should not be empty",
											"        pm.expect(film.title.trim(), `Film ${index} title`).to.not.be.empty;",
											"        ",
											"        // Description should not be empty",
											"        pm.expect(film.description.trim(), `Film ${index} description`).to.not.be.empty;",
											"        ",
											"        // If release_date exists, it should be a valid date",
											"        if (film.release_date) {",
											"            const date = new Date(film.release_date);",
											"            pm.expect(date.toString(), `Film ${index} release_date`).to.not.equal('Invalid Date');",
											"        }",
											"        ",
											"        // If available_qualities exists, it should not be empty",
											"        if (film.available_qualities) {",
											"            pm.expect(film.available_qualities, `Film ${index} available_qualities`).to.not.be.empty;",
											"        }",
											"    });",
											"});",
											"",
											"// Optional: Pagination tests if your API supports it",
											"if (pm.response.headers.has('X-Total-Count')) {",
											"    pm.test(\"Pagination headers are present\", function () {",
											"        pm.response.to.have.header('X-Total-Count');",
											"        const totalCount = parseInt(pm.response.headers.get('X-Total-Count'));",
											"        pm.expect(totalCount).to.be.a('number');",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/films",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for film adding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has correct film structure\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Required fields with type checking",
											"    pm.expect(response).to.have.property('id').that.is.a('string');",
											"    pm.expect(response).to.have.property('title').that.is.a('string');",
											"    pm.expect(response).to.have.property('type').that.equals('film');",
											"    pm.expect(response).to.have.property('description').that.is.a('string');",
											"    ",
											"    // Optional fields type checking",
											"    if (response.preview_image !== null) {",
											"        pm.expect(response.preview_image).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.subs !== null) {",
											"        pm.expect(response.subs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.dubs !== null) {",
											"        pm.expect(response.dubs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.available_qualities !== null) {",
											"        pm.expect(response.available_qualities).to.be.an('array');",
											"    }",
											"    ",
											"    if (response.credits !== null) {",
											"        pm.expect(response.credits).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.videoUrl !== null) {",
											"        pm.expect(response.videoUrl).to.be.a('string');",
											"    }",
											"    ",
											"    // Nullable fields existence check",
											"    pm.expect(response).to.have.property('release_date');",
											"    pm.expect(response).to.have.property('parent_content_id');",
											"    pm.expect(response).to.have.property('season');",
											"    pm.expect(response).to.have.property('episode_number');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Inception\",\n    \"description\": \"A mind-bending thriller\",\n    \"preview_image\": \"inception.jpg\",\n    \"subs\": {\n        \"en\": \"English\",\n        \"es\": \"Spanish\"\n    },\n    \"dubs\": {\n        \"en\": \"English\",\n        \"fr\": \"French\"\n    },\n    \"available_qualities\": [\n        \"HD\",\n        \"4K\"\n    ],\n    \"credits\": \"Christopher Nolan\",\n    \"videoUrl\": \"https://res.cloudinary.com/your-cloud-name/video/upload/v1616600992/your-video-path.mp4\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/films",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for film return",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has correct film structure\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Required fields with type checking",
											"    pm.expect(response).to.have.property('id').that.is.a('string');",
											"    pm.expect(response).to.have.property('title').that.is.a('string');",
											"    pm.expect(response).to.have.property('type').that.equals('film');",
											"    pm.expect(response).to.have.property('description').that.is.a('string');",
											"    ",
											"    // Optional fields type checking",
											"    if (response.preview_image !== null) {",
											"        pm.expect(response.preview_image).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.subs !== null) {",
											"        pm.expect(response.subs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.dubs !== null) {",
											"        pm.expect(response.dubs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.available_qualities !== null) {",
											"        pm.expect(response.available_qualities).to.be.an('array');",
											"    }",
											"    ",
											"    if (response.credits !== null) {",
											"        pm.expect(response.credits).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.videoUrl !== null) {",
											"        pm.expect(response.videoUrl).to.be.a('string');",
											"    }",
											"    ",
											"    // Nullable fields existence check",
											"    pm.expect(response).to.have.property('release_date');",
											"    pm.expect(response).to.have.property('parent_content_id');",
											"    pm.expect(response).to.have.property('season');",
											"    pm.expect(response).to.have.property('episode_number');",
											"});",
											"",
											"// Error case test (in a separate request with invalid ID)",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.have.property('message');",
											"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
											"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/films/94bc933b-f95b-4341-8f26-f6b2586b86e2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"films",
										"94bc933b-f95b-4341-8f26-f6b2586b86e2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for film update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Get the request body for comparison",
											"const requestBody = JSON.parse(pm.request.body.raw);",
											"",
											"pm.test(\"Response has correct updated film structure\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Verify updated fields match request",
											"    pm.expect(response.title).to.equal(requestBody.title);",
											"    pm.expect(response.description).to.equal(requestBody.description);",
											"    ",
											"    // Required fields with type checking",
											"    pm.expect(response).to.have.property('id').that.is.a('string');",
											"    pm.expect(response).to.have.property('title').that.is.a('string');",
											"    pm.expect(response).to.have.property('type').that.equals('film');",
											"    pm.expect(response).to.have.property('description').that.is.a('string');",
											"    ",
											"    // Optional fields type checking",
											"    if (response.preview_image !== null) {",
											"        pm.expect(response.preview_image).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.subs !== null) {",
											"        pm.expect(response.subs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.dubs !== null) {",
											"        pm.expect(response.dubs).to.be.an('object');",
											"    }",
											"    ",
											"    if (response.available_qualities !== null) {",
											"        pm.expect(response.available_qualities).to.be.an('array');",
											"    }",
											"    ",
											"    if (response.credits !== null) {",
											"        pm.expect(response.credits).to.be.a('string');",
											"    }",
											"    ",
											"    if (response.videoUrl !== null) {",
											"        pm.expect(response.videoUrl).to.be.a('string');",
											"    }",
											"    ",
											"    // Nullable fields existence check",
											"    pm.expect(response).to.have.property('release_date');",
											"    pm.expect(response).to.have.property('parent_content_id');",
											"    pm.expect(response).to.have.property('season');",
											"    pm.expect(response).to.have.property('episode_number');",
											"});",
											"",
											"// Verify the ID matches the path parameter",
											"pm.test(\"Response ID matches request ID\", function() {",
											"    const response = pm.response.json();",
											"    const requestId = pm.request.url.path[pm.request.url.path.length - 1];",
											"    pm.expect(response.id).to.equal(requestId);",
											"});",
											"",
											"// Error case test",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.have.property('message');",
											"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
											"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Updated Inception\",\n    \"description\": \"Updated description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/films/94bc933b-f95b-4341-8f26-f6b2586b86e2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"films",
										"94bc933b-f95b-4341-8f26-f6b2586b86e2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for film delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify the deletion by attempting to get the film (you might need to do this in a separate request)",
											"if (pm.response.code === 200) {",
											"    const filmId = pm.request.url.path[pm.request.url.path.length - 1];",
											"    console.log(\"Successfully deleted film with ID:\", filmId);",
											"    ",
											"    // Store the deleted ID to verify it's really gone",
											"    pm.environment.set(\"deletedFilmId\", filmId);",
											"}",
											"",
											"// Error case test",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.have.property('message');",
											"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
											"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
											"    });",
											"}",
											"",
											"// Verify response format if there is a body",
											"if (pm.response.headers.get(\"Content-Type\") && ",
											"    pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
											"    ",
											"    pm.test(\"Response format is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.be.an('object');",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/films/c35531ab-5d9b-490b-8003-dbf3ca32206a",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"films",
										"c35531ab-5d9b-490b-8003-dbf3ca32206a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Episodes",
					"item": [
						{
							"name": "Check for add episode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"type\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"episode_number\");",
											"    pm.expect(jsonData).to.have.property(\"parent_content_id\");",
											"    pm.expect(jsonData).to.have.property(\"available_qualities\");",
											"    pm.expect(jsonData).to.have.property(\"videoUrl\");",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.type).to.equal('episode');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"    pm.expect(jsonData.episode_number).to.be.a('number');",
											"    pm.expect(jsonData.available_qualities).to.be.an('array');",
											"});",
											"",
											"// Store episode ID",
											"if (pm.response.code === 201) {",
											"    pm.environment.set(\"episode_id\", pm.response.json().id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"The pretty Boys\",\n    \"description\": \"The first episode of the boys.\",\n    \"season_id\": \"cbc47152-85dd-4e4f-acd8-0125297968aa\",\n    \"episode_number\": 1,\n    \"preview_image\": \"episode-1.jpg\",\n    \"release_date\": \"2025-01-15\",\n    \"available_qualities\": [\n        \"HD\",\n        \"4K\"\n    ],\n    \"videoUrl\": \"https://res.cloudinary.com/your-cloud-name/video/upload/v1616600992/your-video-path.mp4\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/episodes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"episodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for valid episodes return by season ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Check if response is not empty",
											"pm.test(\"Response should not be an empty array\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"// Response structure validation",
											"pm.test(\"Response is an array of episodes\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Check if response is an array",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"    // If array is not empty, check structure of each episode",
											"    if (response.length > 0) {",
											"        response.forEach((episode, index) => {",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('id').that.is.a('string');",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('title').that.is.a('string');",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('type').that.is.a('string');",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('description').that.is.a('string');",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('parent_content_id').that.is.a('string');",
											"            pm.expect(episode, `Episode at index ${index}`).to.have.property('episode_number').that.is.a('number');",
											"            ",
											"            // Optional fields",
											"            if (episode.preview_image) {",
											"                pm.expect(episode.preview_image).to.be.a('string');",
											"            }",
											"            if (episode.release_date) {",
											"                pm.expect(episode.release_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"            }",
											"            if (episode.available_qualities) {",
											"                pm.expect(episode.available_qualities).to.be.an('array');",
											"                episode.available_qualities.forEach(quality => {",
											"                    pm.expect(quality).to.be.a('string');",
											"                });",
											"            }",
											"            if (episode.videoUrl) {",
											"                pm.expect(episode.videoUrl).to.be.a('string');",
											"            }",
											"            ",
											"            // Verify UUID formats",
											"            pm.expect(episode.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
											"            pm.expect(episode.parent_content_id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
											"        });",
											"    }",
											"});",
											"",
											"// [Rest of the tests remain the same...]"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/episodes/season/cbc47152-85dd-4e4f-acd8-0125297968aa",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"episodes",
										"season",
										"cbc47152-85dd-4e4f-acd8-0125297968aa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for valid episodes return by episode ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code should be 200 or 404\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    if (pm.response.code === 200) {",
											"        const response = pm.response.json();",
											"        ",
											"        pm.expect(response).to.have.property('id');",
											"        pm.expect(response).to.have.property('title');",
											"        pm.expect(response).to.have.property('type');",
											"        pm.expect(response).to.have.property('description');",
											"        pm.expect(response).to.have.property('preview_image');",
											"        pm.expect(response).to.have.property('episode_number');",
											"        pm.expect(response).to.have.property('videoUrl');",
											"    }",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    if (pm.response.code === 200) {",
											"        const response = pm.response.json();",
											"        ",
											"        pm.expect(response.id).to.be.a('string');",
											"        pm.expect(response.title).to.be.a('string');",
											"        pm.expect(response.type).to.be.a('string');",
											"        pm.expect(response.description).to.be.a('string');",
											"        pm.expect(response.episode_number).to.be.a('number');",
											"    }",
											"});",
											"",
											"// Test 404 case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response.statusCode).to.equal(404);",
											"        pm.expect(response.message).to.equal(\"Episode not found\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/episodes/e3a2f10e-d0d5-4f51-9016-1c8af26f14f7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"episodes",
										"e3a2f10e-d0d5-4f51-9016-1c8af26f14f7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for update episode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code should be 200 or 404\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Test successful response structure",
											"if (pm.response.code === 200) {",
											"    pm.test(\"Response has required episode fields\", function () {",
											"        const response = pm.response.json();",
											"        ",
											"        const requiredFields = [",
											"            'id',",
											"            'title',",
											"            'type',",
											"            'description',",
											"            'preview_image',",
											"            'release_date',",
											"            'available_qualities',",
											"            'episode_number',",
											"            'videoUrl'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(response).to.have.property(field);",
											"        });",
											"    });",
											"    ",
											"    pm.test(\"Data types are correct\", function () {",
											"        const response = pm.response.json();",
											"        ",
											"        pm.expect(response.id).to.be.a('string');",
											"        pm.expect(response.title).to.be.a('string');",
											"        pm.expect(response.type).to.be.a('string');",
											"        pm.expect(response.description).to.be.a('string');",
											"        pm.expect(response.episode_number).to.be.a('number');",
											"        pm.expect(response.available_qualities).to.be.an('array');",
											"        pm.expect(response.videoUrl).to.be.a('string');",
											"    });",
											"}",
											"",
											"// Test 404 error response",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response.statusCode).to.equal(404);",
											"        pm.expect(response.message).to.equal(\"Episode not found\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"The First of the boys\",\n  \"description\": \"A new beginning of the series\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/episodes/e3a2f10e-d0d5-4f51-9016-1c8af26f14f7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"episodes",
										"e3a2f10e-d0d5-4f51-9016-1c8af26f14f7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for update episode Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code should be 200 or 404\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"// Test successful deletion",
											"if (pm.response.code === 200) {",
											"    pm.test(\"Successful deletion\", function () {",
											"        pm.expect(pm.response.text()).to.be.empty;",
											"    });",
											"}",
											"",
											"// Test 404 error case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found error structure\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response.statusCode).to.equal(404);",
											"        pm.expect(response.message).to.equal(\"Episode not found\");",
											"    });",
											"}",
											"",
											"// Clear stored episode ID if successful",
											"if (pm.response.code === 200) {",
											"    pm.environment.unset(\"episode_id\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/episodes/4bb240f8-9dea-4846-9ac1-cc5d40dcc199",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"episodes",
										"4bb240f8-9dea-4846-9ac1-cc5d40dcc199"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Series",
					"item": [
						{
							"name": "Check for add series",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test content type with charset",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"release_date\");",
											"    pm.expect(jsonData).to.have.property(\"type\");",
											"});",
											"",
											"// Test required data types",
											"pm.test(\"Required fields have correct data types\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"    pm.expect(jsonData.type).to.equal('series');",
											"});",
											"",
											"// Test date format",
											"pm.test(\"Release date is in correct format\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.release_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"// Test UUID format",
											"pm.test(\"ID is valid UUID\", function () {",
											"    const jsonData = pm.response.json();",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
											"    pm.expect(jsonData.id).to.match(uuidRegex);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"The boys\",\n  \"description\": \"Where the boys meet\",\n  \"release_date\": \"2025-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/series",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"series"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for valid series return",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response is array",
											"pm.test(\"Response should be an array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test array items structure",
											"pm.test(\"Array items have required properties\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"        const firstItem = jsonData[0];",
											"        pm.expect(firstItem).to.have.property(\"id\");",
											"        pm.expect(firstItem).to.have.property(\"title\");",
											"        pm.expect(firstItem).to.have.property(\"type\");",
											"        pm.expect(firstItem).to.have.property(\"description\");",
											"        pm.expect(firstItem).to.have.property(\"release_date\");",
											"    }",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"        const firstItem = jsonData[0];",
											"        pm.expect(firstItem.id).to.be.a('string');",
											"        pm.expect(firstItem.title).to.be.a('string');",
											"        pm.expect(firstItem.type).to.be.a('string');",
											"        pm.expect(firstItem.description).to.be.a('string');",
											"    }",
											"});",
											"",
											"// Test UUID format",
											"pm.test(\"ID is valid UUID\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
											"        pm.expect(jsonData[0].id).to.match(uuidRegex);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/series",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"series"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for return series by IDr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"type\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"release_date\");",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.type).to.equal('series');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"});",
											"",
											"// Test UUID format",
											"pm.test(\"ID is valid UUID format\", function () {",
											"    const jsonData = pm.response.json();",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
											"    pm.expect(jsonData.id).to.match(uuidRegex);",
											"});",
											"",
											"// Test release date format",
											"pm.test(\"Release date is in correct format\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.release_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/series/7fb0651d-3c8f-4fc3-acba-1a2fe1cdb0ce",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"series",
										"7fb0651d-3c8f-4fc3-acba-1a2fe1cdb0ce"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for update series",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure and updated fields",
											"pm.test(\"Response has updated fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData.title).to.equal(requestData.title);",
											"    pm.expect(jsonData.description).to.equal(requestData.description);",
											"    pm.expect(jsonData.release_date).to.equal(requestData.release_date);",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.type).to.equal('series');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"});",
											"",
											"// Test UUID format",
											"pm.test(\"ID is valid UUID format\", function () {",
											"    const jsonData = pm.response.json();",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
											"    pm.expect(jsonData.id).to.match(uuidRegex);",
											"});",
											"",
											"// Test release date format",
											"pm.test(\"Release date is in correct format\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.release_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Boys Title\",\n  \"description\": \"Updated series description\",\n  \"release_date\": \"2025-03-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/series/7fb0651d-3c8f-4fc3-acba-1a2fe1cdb0ce",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"series",
										"7fb0651d-3c8f-4fc3-acba-1a2fe1cdb0ce"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for delete series",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test success status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test response handling",
											"if (pm.response.code === 200) {",
											"    pm.test(\"Delete operation successful\", function () {",
											"        // Just verify we can proceed without errors",
											"        pm.response.to.be.ok;",
											"    });",
											"}",
											"",
											"// Handle 404 case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response\", function () {",
											"        pm.expect(pm.response.code).to.equal(404);",
											"    });",
											"}",
											"",
											"// Store operation result",
											"pm.environment.set(\"lastDeleteStatus\", pm.response.code);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/series/0afc86ee-a21b-403d-8ed1-c53967bd24d0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"series",
										"0afc86ee-a21b-403d-8ed1-c53967bd24d0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seasons",
					"item": [
						{
							"name": "Check for add season",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response has required fields from DTO\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"release_date\");",
											"});",
											"",
											"pm.test(\"Data types match DTO requirements\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UUID validation\", function () {",
											"    const jsonData = pm.response.json();",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
											"    pm.expect(jsonData.id).to.match(uuidRegex);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Season 1\",\n  \"description\": \"The first season of the boys.\",\n  \"series_id\": \"7fb0651d-3c8f-4fc3-acba-1a2fe1cdb0ce\",\n  \"release_date\": \"2025-01-01\",\n  \"season\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/seasons",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"seasons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for season return by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"season\");",
											"    pm.expect(jsonData).to.have.property(\"release_date\");",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"    pm.expect(jsonData.season).to.be.a('number');",
											"});",
											"",
											"// Test 404 case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.statusCode).to.equal(404);",
											"        pm.expect(jsonData.message).to.equal(\"Season not found\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/seasons/c8cbb555-390a-4627-ada3-7843f292d9d2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"seasons",
										"c8cbb555-390a-4627-ada3-7843f292d9d2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for update season",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure and updated fields",
											"pm.test(\"Response has correct structure and updated fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"season\");",
											"    ",
											"    // Verify updated fields match request",
											"    if (requestData.title) {",
											"        pm.expect(jsonData.title).to.equal(requestData.title);",
											"    }",
											"    if (requestData.description) {",
											"        pm.expect(jsonData.description).to.equal(requestData.description);",
											"    }",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"    pm.expect(jsonData.season).to.be.a('number');",
											"});",
											"",
											"// Test 404 handling",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.statusCode).to.equal(404);",
											"        pm.expect(jsonData.message).to.equal(\"Season not found\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Season 1 Part 2\",\n  \"description\": \"The continuation of Season 1\",\n  \"release_date\": \"2025-03-01\",\n  \"season\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/seasons/54c1217b-cf59-479e-ba79-11d15d169327",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"seasons",
										"54c1217b-cf59-479e-ba79-11d15d169327"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for delete season",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test delete operation result",
											"pm.test(\"Delete operation successful\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    pm.expect(response).to.have.property('raw');",
											"    pm.expect(response).to.have.property('affected');",
											"    pm.expect(response.affected).to.equal(1);",
											"});",
											"",
											"// Test 404 case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response.statusCode).to.equal(404);",
											"        pm.expect(response.message).to.equal(\"Season not found\");",
											"    });",
											"}",
											"",
											"// Store delete result",
											"if (pm.response.code === 200) {",
											"    pm.environment.set(\"lastDeletedSeasonId\", pm.response.json().id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/seasons/90b24d79-2be1-4c0d-a295-2a106269325e",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"seasons",
										"90b24d79-2be1-4c0d-a295-2a106269325e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for valid seasons return",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test content type",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test response structure",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"    pm.expect(jsonData).to.have.property(\"season\");",
											"    pm.expect(jsonData).to.have.property(\"release_date\");",
											"});",
											"",
											"// Test data types",
											"pm.test(\"Data types are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.id).to.be.a('string');",
											"    pm.expect(jsonData.title).to.be.a('string');",
											"    pm.expect(jsonData.description).to.be.a('string');",
											"    pm.expect(jsonData.season).to.be.a('number');",
											"});",
											"",
											"// Test 404 case",
											"if (pm.response.code === 404) {",
											"    pm.test(\"Not found response is correct\", function () {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.statusCode).to.equal(404);",
											"        pm.expect(jsonData.message).to.equal(\"Season not found\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/contents/seasons/c8cbb555-390a-4627-ada3-7843f292d9d2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"contents",
										"seasons",
										"c8cbb555-390a-4627-ada3-7843f292d9d2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check for valid contents adding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test for content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"// Validate response body structure",
									"pm.test(\"Response body has all required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"title\", \"The Matrix\");",
									"    pm.expect(jsonData).to.have.property(\"type\", \"film\");",
									"    pm.expect(jsonData).to.have.property(\"description\");",
									"    pm.expect(jsonData).to.have.property(\"preview_image\");",
									"    pm.expect(jsonData).to.have.property(\"release_date\");",
									"    pm.expect(jsonData).to.have.property(\"subs\");",
									"    pm.expect(jsonData).to.have.property(\"dubs\");",
									"    pm.expect(jsonData).to.have.property(\"available_qualities\");",
									"    pm.expect(jsonData).to.have.property(\"credits\");",
									"    pm.expect(jsonData).to.have.property(\"parent_content_id\");",
									"    pm.expect(jsonData).to.have.property(\"season\");",
									"    pm.expect(jsonData).to.have.property(\"episode_number\");",
									"    pm.expect(jsonData).to.have.property(\"videoUrl\");",
									"});",
									"",
									"// Validate specific fields",
									"pm.test(\"Subs and dubs contain expected languages\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.subs).to.have.property(\"en\", \"English\");",
									"    pm.expect(jsonData.subs).to.have.property(\"es\", \"Spanish\");",
									"    pm.expect(jsonData.dubs).to.have.property(\"en\", \"English\");",
									"    pm.expect(jsonData.dubs).to.have.property(\"fr\", \"French\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"The Matrix\",\n  \"type\": \"film\",\n  \"description\": \"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.\",\n  \"preview_image\": \"http://example.com/preview.jpg\",\n  \"release_date\": null,\n  \"subs\": {\n    \"en\": \"English\",\n    \"es\": \"Spanish\"\n  },\n  \"dubs\": {\n    \"en\": \"English\",\n    \"fr\": \"French\"\n  },\n  \"available_qualities\": [\n    \"720p\",\n    \"1080p\"\n  ],\n  \"credits\": \"Keanu Reeves, Laurence Fishburne, Carrie-Anne Moss\",\n  \"parent_content_id\": \"abcd-1234-xyz\",\n  \"season\": 1,\n  \"episode_number\": 3,\n  \"videoUrl\": \"https://res.cloudinary.com/your-cloud-name/video/upload/v1616600992/your-video-path.mp4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/contents/contents",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"contents",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid content return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response structure",
									"pm.test(\"Response is an array of content items\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if it's an array and not empty",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"    pm.expect(responseData.length).to.be.above(0);",
									"    ",
									"    // Test first item has required fields",
									"    const firstItem = responseData[0];",
									"    pm.expect(firstItem).to.have.property('title');",
									"    pm.expect(firstItem).to.have.property('type');",
									"    pm.expect(firstItem).to.have.property('description');",
									"});",
									"",
									"// Validate data types of required fields",
									"pm.test(\"Content items have correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach((item, index) => {",
									"        pm.expect(item.title, `Item ${index}: title`).to.be.a('string');",
									"        pm.expect(item.type, `Item ${index}: type`).to.be.a('string');",
									"        pm.expect(item.description, `Item ${index}: description`).to.be.a('string');",
									"    });",
									"});",
									"",
									"// Save first content ID for other tests (if needed)",
									"if (pm.response.code === 200) {",
									"    const responseData = pm.response.json();",
									"    if (responseData.length > 0) {",
									"        pm.environment.set(\"testContentId\", responseData[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/contents/contents",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"contents",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for content return ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the expected ID for reuse",
									"const expectedId = \"82dd5b70-da1c-4931-805a-add2038f5112\";",
									"",
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response structure and content",
									"pm.test(\"Response contains correct content item\", function () {",
									"    const content = pm.response.json();",
									"    ",
									"    // Check required fields exist",
									"    pm.expect(content).to.have.property('title');",
									"    pm.expect(content).to.have.property('type');",
									"    pm.expect(content).to.have.property('description');",
									"    ",
									"    // Verify data types of required fields",
									"    pm.expect(content.title).to.be.a('string');",
									"    pm.expect(content.type).to.be.a('string');",
									"    pm.expect(content.description).to.be.a('string');",
									"});",
									"",
									"// Optional fields validation (if present)",
									"pm.test(\"Optional fields have correct types when present\", function () {",
									"    const content = pm.response.json();",
									"    ",
									"    if (content.preview_image) {",
									"        pm.expect(content.preview_image).to.be.a('string');",
									"    }",
									"    ",
									"    if (content.release_date) {",
									"        pm.expect(Date.parse(content.release_date)).to.be.a('number');",
									"    }",
									"    ",
									"    if (content.available_qualities) {",
									"        pm.expect(content.available_qualities).to.be.an('array');",
									"    }",
									"    ",
									"    if (content.season) {",
									"        pm.expect(content.season).to.be.a('number');",
									"    }",
									"    ",
									"    if (content.episode_number) {",
									"        pm.expect(content.episode_number).to.be.a('number');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/contents/contents/ea2bb76d-4623-4d60-b3a2-20da5ce2e232",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"contents",
								"contents",
								"ea2bb76d-4623-4d60-b3a2-20da5ce2e232"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for patched content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Verify exact response structure",
									"pm.test(\"Response has correct update result structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check all properties exist",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update operation affected one row\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.equal(1);",
									"});",
									"",
									"// Save the result for potential use in other requests",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"lastUpdateResult\", JSON.stringify(pm.response.json()));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Matrix Title\",\n    \"description\": \"Updated description for the movie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/contents/contents/ea2bb76d-4623-4d60-b3a2-20da5ce2e232",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"contents",
								"contents",
								"ea2bb76d-4623-4d60-b3a2-20da5ce2e232"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for patched content Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store test ID for reference",
									"const testId = \"82dd5b70-da1c-4931-805a-add2038f5112\";",
									"",
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Verify delete result structure",
									"pm.test(\"Response has correct delete result structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check expected properties",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Delete operation affected one row\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.equal(1);",
									"});",
									"",
									"// Optional: Save result for use in other tests",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"lastDeleteResult\", JSON.stringify(pm.response.json()));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/contents/contents/82dd5b70-da1c-4931-805a-add2038f5112",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"contents",
								"contents",
								"82dd5b70-da1c-4931-805a-add2038f5112"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct user structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('username').that.equals('johndoe123');",
									"    pm.expect(response).to.have.property('email').that.equals('johndoe@example.com');",
									"    ",
									"    // System-generated fields",
									"    pm.expect(response).to.have.property('login_attempts').that.equals(0);",
									"    pm.expect(response).to.have.property('account_status').that.equals('active');",
									"    pm.expect(response).to.have.property('role').that.equals('Junior');",
									"    ",
									"    // Date fields",
									"    pm.expect(response).to.have.property('created_at').that.is.a('string');",
									"    pm.expect(response).to.have.property('modified_at').that.is.a('string');",
									"    ",
									"    // Optional fields",
									"    pm.expect(response).to.have.property('refreshToken').that.equals('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9');",
									"    pm.expect(response).to.have.property('socialId').that.equals('google123456');",
									"    ",
									"    // Verify UUID format for id",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify date formats",
									"    const created_at = new Date(response.created_at);",
									"    const modified_at = new Date(response.modified_at);",
									"    pm.expect(created_at.toString()).to.not.equal('Invalid Date');",
									"    pm.expect(modified_at.toString()).to.not.equal('Invalid Date');",
									"});",
									"",
									"// Save user ID for future use",
									"const response = pm.response.json();",
									"if (response.id) {",
									"    pm.environment.set(\"lastCreatedUserId\", response.id);",
									"    console.log(\"Created user with ID:\", response.id);",
									"}",
									"",
									"// Log the complete response for verification",
									"console.log(\"Complete Response:\", JSON.stringify(response, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"johndoe1234\",\n    \"email\": \"johndoe4@example.com\",\n    \"password\": \"PasSword@1232323\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc\",\n    \"socialId\": \"google1234565\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid user return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response is an array of users\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"    ",
									"    response.forEach((user, index) => {",
									"        pm.expect(user).to.have.property('id').that.is.a('string');",
									"        pm.expect(user).to.have.property('username').that.is.a('string');",
									"        pm.expect(user).to.have.property('email').that.is.a('string');",
									"        pm.expect(user).to.have.property('login_attempts').that.is.a('number');",
									"        pm.expect(user).to.have.property('account_status').that.is.a('string');",
									"        pm.expect(user).to.have.property('role').that.is.a('string');",
									"        pm.expect(user).to.have.property('created_at').that.is.a('string');",
									"        pm.expect(user).to.have.property('modified_at').that.is.a('string');",
									"        ",
									"        // Validate UUID format",
									"        pm.expect(user.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"        ",
									"        // Validate email format",
									"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"        ",
									"        // Validate dates",
									"        const created_at = new Date(user.created_at);",
									"        const modified_at = new Date(user.modified_at);",
									"        pm.expect(created_at.toString()).to.not.equal('Invalid Date');",
									"        pm.expect(modified_at.toString()).to.not.equal('Invalid Date');",
									"    });",
									"});",
									"",
									"// Updated schema validation",
									"const userSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: [",
									"            'id',",
									"            'username',",
									"            'email',",
									"            'login_attempts',",
									"            'account_status',",
									"            'role',",
									"            'created_at',",
									"            'modified_at'",
									"        ],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            username: { type: 'string' },",
									"            email: { type: 'string', format: 'email' },",
									"            login_attempts: { type: 'number', minimum: 0 },",
									"            account_status: { type: 'string' },",
									"            role: { type: 'string' },",
									"            created_at: { type: 'string', format: 'date-time' },",
									"            modified_at: { type: 'string', format: 'date-time' },",
									"            password: { type: 'string' },",
									"            refreshToken: { type: 'string' },",
									"            socialId: { type: ['string', 'null'] },",
									"            profileIcon: { type: 'string' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(userSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if response has content",
									"if (pm.response.text()) {",
									"    pm.test(\"Content-Type is application/json\", function () {",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"        ",
									"        // Parse and verify JSON response if exists",
									"        const response = pm.response.json();",
									"        console.log(\"Response:\", response);",
									"        ",
									"        if (response) {",
									"            pm.test(\"Response has correct structure\", function () {",
									"                pm.expect(response).to.be.an('object');",
									"                if (response.message) {",
									"                    pm.expect(response.message).to.be.a('string');",
									"                }",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Verify the request method",
									"pm.test(\"Correct HTTP method\", function() {",
									"    pm.expect(pm.request.method).to.equal('DELETE');",
									"});",
									"",
									"// Log raw response for debugging",
									"console.log(\"Raw response:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/users/be776f53-ef9e-46f0-b7f3-04486089074f",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users",
								"be776f53-ef9e-46f0-b7f3-04486089074f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update user ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request body is valid\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    // Username validation (if present)",
									"    if (requestBody.username) {",
									"        pm.expect(requestBody.username).to.match(/^[a-zA-Z0-9]+$/);",
									"    }",
									"    ",
									"    // Ensure profileIcon is not in the request",
									"    pm.expect(requestBody).to.not.have.property('profileIcon');",
									"});",
									"",
									"// Handle different response cases",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Bad request response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message').that.is.an('array');",
									"        pm.expect(response).to.have.property('error').that.equals('Bad Request');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(400);",
									"        console.log(\"Validation errors:\", response.message);",
									"    });",
									"} else if (pm.response.code === 200) {",
									"    pm.test(\"Response has correct user structure\", function () {",
									"        const response = pm.response.json();",
									"        ",
									"        // Required fields with type checking",
									"        pm.expect(response).to.have.property('id').that.is.a('string');",
									"        pm.expect(response).to.have.property('username').that.is.a('string');",
									"        pm.expect(response).to.have.property('email').that.is.a('string');",
									"        pm.expect(response).to.have.property('login_attempts').that.is.a('number');",
									"        pm.expect(response).to.have.property('account_status').that.equals('inactive');",
									"        pm.expect(response).to.have.property('role').that.equals('API');",
									"        ",
									"        // Verify UUID format",
									"        pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"        ",
									"        // Verify dates",
									"        const created_at = new Date(response.created_at);",
									"        const modified_at = new Date(response.modified_at);",
									"        pm.expect(created_at.toString()).to.not.equal('Invalid Date');",
									"        pm.expect(modified_at.toString()).to.not.equal('Invalid Date');",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"johndoe123\",\n    \"email\": \"updated@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/users/dccd094f-4eab-4728-a780-ccce34f1d225",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users",
								"dccd094f-4eab-4728-a780-ccce34f1d225"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for user return by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct user structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields validation",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('username').that.is.a('string');",
									"    pm.expect(response).to.have.property('email').that.is.a('string');",
									"    pm.expect(response).to.have.property('login_attempts').that.is.a('number');",
									"    pm.expect(response).to.have.property('account_status').that.is.a('string');",
									"    pm.expect(response).to.have.property('role').that.is.a('string');",
									"    pm.expect(response).to.have.property('password').that.is.a('string');",
									"    ",
									"    // Verify formats",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    pm.expect(response.refreshToken).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
									"    pm.expect(response.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    ",
									"    // Verify dates",
									"    const created_at = new Date(response.created_at);",
									"    const modified_at = new Date(response.modified_at);",
									"    pm.expect(created_at.toString()).to.not.equal('Invalid Date');",
									"    pm.expect(modified_at.toString()).to.not.equal('Invalid Date');",
									"});",
									"",
									"// Updated schema",
									"const userSchema = {",
									"    type: 'object',",
									"    required: [",
									"        'id',",
									"        'username',",
									"        'email',",
									"        'login_attempts',",
									"        'account_status',",
									"        'role',",
									"        'created_at',",
									"        'modified_at',",
									"        'password',",
									"        'refreshToken',",
									"        'profileIcon'",
									"    ],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        username: { type: 'string' },",
									"        email: { type: 'string', format: 'email' },",
									"        login_attempts: { type: 'number', minimum: 0 },",
									"        account_status: { type: 'string' },",
									"        role: { type: 'string' },",
									"        created_at: { type: 'string', format: 'date-time' },",
									"        modified_at: { type: 'string', format: 'date-time' },",
									"        password: { type: 'string' },",
									"        refreshToken: { type: 'string' },",
									"        socialId: { type: ['string', 'null'] },",
									"        profileIcon: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(userSchema);",
									"});",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzcwMzIyODYsImV4cCI6MTczNzYzNzA4Nn0.gtP9hM1mBmtLAQGSLyq_PbsMGA8kEEDoGzijnzhPDYc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/users/dd04e088-c01a-4b22-a94e-4b0c911ae351",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users",
								"dd04e088-c01a-4b22-a94e-4b0c911ae351"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genres",
			"item": [
				{
					"name": "Check for valid genre return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response is an array of genres\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check if response is an array",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    // If array is not empty, check structure of each genre",
									"    if (response.length > 0) {",
									"        response.forEach((genre, index) => {",
									"            pm.expect(genre, `Genre at index ${index}`).to.have.property('id').that.is.a('string');",
									"            pm.expect(genre, `Genre at index ${index}`).to.have.property('name').that.is.a('string');",
									"            pm.expect(genre, `Genre at index ${index}`).to.have.property('description').that.is.a('string');",
									"            ",
									"            // Verify UUID format",
									"            pm.expect(genre.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"        });",
									"    }",
									"});",
									"",
									"// Schema validation",
									"const genreSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['id', 'name', 'description'],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            name: { type: 'string' },",
									"            description: { type: 'string' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(genreSchema);",
									"});",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Save first genre ID for future tests if available",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.length > 0) {",
									"        pm.environment.set(\"genreId\", response[0].id);",
									"        console.log(\"Saved first genre ID:\", response[0].id);",
									"    }",
									"}",
									"",
									"// Log response for debugging",
									"console.log(\"Total genres returned:\", pm.response.json().length);",
									"console.log(\"Response:\", pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/genres",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid add genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has required fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(requestBody).to.have.property('name').that.is.a('string');",
									"    pm.expect(requestBody).to.have.property('description').that.is.a('string');",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct genre structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('name').that.is.a('string');",
									"    pm.expect(response).to.have.property('description').that.is.a('string');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify request data matches response",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.name).to.equal(requestBody.name);",
									"    pm.expect(response.description).to.equal(requestBody.description);",
									"});",
									"",
									"// Schema validation",
									"const genreSchema = {",
									"    type: 'object',",
									"    required: ['id', 'name', 'description'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        name: { type: 'string' },",
									"        description: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(genreSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Action\",\n    \"description\": \"Action genre movies and shows\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/genres",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for genre return by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct genre structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('name').that.is.a('string');",
									"    pm.expect(response).to.have.property('description').that.is.a('string');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify it's the requested genre",
									"    pm.expect(response.id).to.equal('cfcdffc3-e7f4-44e4-aacf-7f02f3bbd449');",
									"});",
									"",
									"// Schema validation",
									"const genreSchema = {",
									"    type: 'object',",
									"    required: ['id', 'name', 'description'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        name: { type: 'string' },",
									"        description: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(genreSchema);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/genres/cfcdffc3-e7f4-44e4-aacf-7f02f3bbd449",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"genres",
								"cfcdffc3-e7f4-44e4-aacf-7f02f3bbd449"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has valid update fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    if (requestBody.name) {",
									"        pm.expect(requestBody.name).to.be.a('string');",
									"    }",
									"    if (requestBody.description) {",
									"        pm.expect(requestBody.description).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct update structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM update response structure",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Action\",\n    \"description\": \"Updated action genre description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/genres/cfcdffc3-e7f4-44e4-aacf-7f02f3bbd449",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"genres",
								"cfcdffc3-e7f4-44e4-aacf-7f02f3bbd449"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/genres/9019a0e3-ca75-4893-8bf5-ddc8bca07c20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"genres",
								"9019a0e3-ca75-4893-8bf5-ddc8bca07c20"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Languages",
			"item": [
				{
					"name": "Check for valid language return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response is an array of languages\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check if response is an array",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    // If array is not empty, check structure of each language",
									"    if (response.length > 0) {",
									"        response.forEach((language, index) => {",
									"            pm.expect(language, `Language at index ${index}`).to.have.property('id').that.is.a('string');",
									"            pm.expect(language, `Language at index ${index}`).to.have.property('name').that.is.a('string');",
									"            pm.expect(language, `Language at index ${index}`).to.have.property('code').that.is.a('string');",
									"            ",
									"            // Verify UUID format",
									"            pm.expect(language.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"        });",
									"    }",
									"});",
									"",
									"// Schema validation",
									"const languageSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['id', 'name', 'code'],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            name: { type: 'string' },",
									"            code: { type: 'string' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(languageSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/languages",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid add language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has required fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(requestBody).to.have.property('name').that.is.a('string');",
									"    pm.expect(requestBody).to.have.property('code').that.is.a('string');",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct language structure\", function () {",
									"    const response = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('name').that.equals(requestBody.name);",
									"    pm.expect(response).to.have.property('code').that.equals(requestBody.code);",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"});",
									"",
									"// Schema validation",
									"const languageSchema = {",
									"    type: 'object',",
									"    required: ['id', 'name', 'code'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        name: { type: 'string' },",
									"        code: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(languageSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxYzllYTlhNy0yOTllLTRiNzEtYmM4MS04ZWUyNTMxYmI1OTAiLCJlbWFpbCI6InN2aUBleGFtcGxlLmNvbSIsInJvbGUiOiJBUEkiLCJpYXQiOjE3MzY5NzM4NzgsImV4cCI6MTczNzU3ODY3OH0.9UCmWVMggaWH9y6qb4SZWPcbZ7Hv5epZ87vqYBPJBx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fake french\",\n    \"code\": \"fr123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/languages",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for return language by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct language structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('name').that.is.a('string');",
									"    pm.expect(response).to.have.property('code').that.is.a('string');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"});",
									"",
									"// Schema validation",
									"const languageSchema = {",
									"    type: 'object',",
									"    required: ['id', 'name', 'code'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        name: { type: 'string' },",
									"        code: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(languageSchema);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/languages/d6d8fcc1-722a-4f72-9541-20e0b82820b9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"languages",
								"d6d8fcc1-722a-4f72-9541-20e0b82820b9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has valid update fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    if (requestBody.name) {",
									"        pm.expect(requestBody.name).to.be.a('string');",
									"    }",
									"    if (requestBody.code) {",
									"        pm.expect(requestBody.code).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct update structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM update response structure",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated French\",\n    \"code\": \"fr456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/languages/d6d8fcc1-722a-4f72-9541-20e0b82820b9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"languages",
								"d6d8fcc1-722a-4f72-9541-20e0b82820b9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/languages/9dd3b090-29ca-4883-93d8-5f73719fa5c0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"languages",
								"9dd3b090-29ca-4883-93d8-5f73719fa5c0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Check for valid profile return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test array response structure",
									"pm.test(\"Response is an array of profiles\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    if (response.length > 0) {",
									"        response.forEach((profile, index) => {",
									"            pm.expect(profile).to.have.property('id').that.is.a('string');",
									"            pm.expect(profile).to.have.property('image').that.is.a('string');",
									"            pm.expect(profile).to.have.property('dateOfBirth').that.is.a('string');",
									"            ",
									"            // Verify UUID format",
									"            pm.expect(profile.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"            ",
									"            // Verify date format",
									"            pm.expect(profile.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        });",
									"    }",
									"});",
									"",
									"// Updated schema validation",
									"const profileSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['id', 'image', 'dateOfBirth'],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            image: { type: 'string' },",
									"            dateOfBirth: { type: 'string', pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(profileSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/profiles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid  add profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct profile structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('image');",
									"    pm.expect(response).to.have.property('dateOfBirth');",
									"    pm.expect(response).to.have.property('user').that.is.an('object');",
									"    pm.expect(response).to.have.property('language').that.is.an('object');",
									"});",
									"",
									"// Test nested objects",
									"pm.test(\"User and Language objects have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // User object validation",
									"    pm.expect(response.user).to.have.property('id');",
									"    pm.expect(response.user).to.have.property('username');",
									"    pm.expect(response.user).to.have.property('email');",
									"    ",
									"    // Language object validation",
									"    pm.expect(response.language).to.have.property('id');",
									"    pm.expect(response.language).to.have.property('name');",
									"    pm.expect(response.language).to.have.property('code');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"image\": \"https://example.com/image.jpg\",\n  \"dateOfBirth\": \"1990-05-20\",\n  \"userId\": \"378bd3f8-f546-4211-8c2c-6526581809ef\",\n  \"languageId\": \"eaa827c4-4d95-4767-8f74-3f8d94053022\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/profiles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for return profile by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct profile structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('image');",
									"    pm.expect(response).to.have.property('dateOfBirth');",
									"});",
									"",
									"// Test data types",
									"pm.test(\"Data types are correct\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.image).to.be.a('string');",
									"    pm.expect(response.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"// Test 404 case",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.statusCode).to.equal(404);",
									"        pm.expect(response.message).to.equal(\"Profile not found\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/profiles/e437b0bf-02f0-4c8a-9420-98e13b879ec8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"profiles",
								"e437b0bf-02f0-4c8a-9420-98e13b879ec8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has valid update fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    if (requestBody.image) {",
									"        pm.expect(requestBody.image).to.be.a('string');",
									"    }",
									"    if (requestBody.dateOfBirth) {",
									"        pm.expect(requestBody.dateOfBirth).to.be.a('string');",
									"        const date = new Date(requestBody.dateOfBirth);",
									"        pm.expect(date.toString()).to.not.equal('Invalid Date');",
									"    }",
									"    if (requestBody.userId) {",
									"        pm.expect(requestBody.userId).to.be.a('string');",
									"        pm.expect(requestBody.userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    }",
									"    if (requestBody.languageId) {",
									"        pm.expect(requestBody.languageId).to.be.a('string');",
									"        pm.expect(requestBody.languageId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    }",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct update structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM update response structure",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"image\": \"https://example.com/updated-profile.jpg\",\n    \"dateOfBirth\": \"2000-05-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/profiles/e437b0bf-02f0-4c8a-9420-98e13b879ec8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"profiles",
								"e437b0bf-02f0-4c8a-9420-98e13b879ec8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/profiles/07b88e85-ee33-4c4f-8469-919081eb9221",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"profiles",
								"07b88e85-ee33-4c4f-8469-919081eb9221"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WatchHistories",
			"item": [
				{
					"name": "Check for valid WatchHistories return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test array structure and fields",
									"pm.test(\"Response is an array of watch histories\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    if (response.length > 0) {",
									"        response.forEach((history, index) => {",
									"            pm.expect(history).to.have.property('id').that.is.a('string');",
									"            pm.expect(history).to.have.property('stoppedAt').that.is.a('string');",
									"            pm.expect(history).to.have.property('watchCount').that.is.a('number');",
									"            pm.expect(history).to.have.property('subtitles').that.is.a('string');",
									"            pm.expect(history).to.have.property('dubs').that.is.a('string');",
									"            ",
									"            // Updated UUID regex pattern",
									"            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"            pm.expect(history.id).to.match(uuidRegex);",
									"            ",
									"            // Verify watchCount is non-negative",
									"            pm.expect(history.watchCount).to.be.at.least(0);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/watchHistories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"watchHistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for return WatchHistories by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct watch history structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('stoppedAt');",
									"    pm.expect(response).to.have.property('watchCount');",
									"    pm.expect(response).to.have.property('subtitles');",
									"    pm.expect(response).to.have.property('dubs');",
									"});",
									"",
									"// Test data types",
									"pm.test(\"Data types are correct\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.stoppedAt).to.be.a('string');",
									"    pm.expect(response.watchCount).to.be.a('number');",
									"    pm.expect(response.subtitles).to.be.a('string');",
									"    pm.expect(response.dubs).to.be.a('string');",
									"});",
									"",
									"// Test 404 case",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.statusCode).to.equal(404);",
									"        pm.expect(response.message).to.equal(\"Watch history not found\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/watchHistories/99925228-195b-4621-bc8b-747f1961bbea",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"watchHistories",
								"99925228-195b-4621-bc8b-747f1961bbea"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update WatchHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has valid update fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    if (requestBody.profileId) {",
									"        pm.expect(requestBody.profileId).to.be.a('string');",
									"        pm.expect(requestBody.profileId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    }",
									"    if (requestBody.contentId) {",
									"        pm.expect(requestBody.contentId).to.be.a('string');",
									"        pm.expect(requestBody.contentId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    }",
									"    if (requestBody.stoppedAt) {",
									"        pm.expect(requestBody.stoppedAt).to.be.a('string');",
									"    }",
									"    if (requestBody.watchCount !== undefined) {",
									"        pm.expect(requestBody.watchCount).to.be.a('number');",
									"        pm.expect(requestBody.watchCount).to.be.at.least(0);",
									"    }",
									"    if (requestBody.subtitles) {",
									"        pm.expect(requestBody.subtitles).to.be.a('string');",
									"    }",
									"    if (requestBody.dubs) {",
									"        pm.expect(requestBody.dubs).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct update structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM update response structure",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stoppedAt\": \"01:30:00\",\n    \"watchCount\": 2,\n    \"subtitles\": \"es\",\n    \"dubs\": \"en\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/watchHistories/99925228-195b-4621-bc8b-747f1961bbea",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"watchHistories",
								"99925228-195b-4621-bc8b-747f1961bbea"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete WatchHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/watchHistories/11e28f9f-b503-454a-b6a7-a8e7fd4b5825",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"watchHistories",
								"11e28f9f-b503-454a-b6a7-a8e7fd4b5825"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid add WatchHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('stoppedAt');",
									"    pm.expect(response).to.have.property('watchCount');",
									"    pm.expect(response).to.have.property('subtitles');",
									"    pm.expect(response).to.have.property('dubs');",
									"    pm.expect(response).to.have.property('profile').that.is.an('object');",
									"    pm.expect(response).to.have.property('content').that.is.an('object');",
									"});",
									"",
									"// Test nested objects",
									"pm.test(\"Profile and Content objects have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Profile validation",
									"    pm.expect(response.profile).to.have.property('id');",
									"    pm.expect(response.profile).to.have.property('image');",
									"    pm.expect(response.profile).to.have.property('dateOfBirth');",
									"    ",
									"    // Content validation",
									"    pm.expect(response.content).to.have.property('id');",
									"    pm.expect(response.content).to.have.property('title');",
									"    pm.expect(response.content).to.have.property('type');",
									"});",
									"",
									"// Test data types",
									"pm.test(\"Data types are correct\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.stoppedAt).to.be.a('string');",
									"    pm.expect(response.watchCount).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profileId\": \"e437b0bf-02f0-4c8a-9420-98e13b879ec8\",\n    \"contentId\": \"9d369bb8-f531-4677-9e02-853d06fa8046\",\n    \"stoppedAt\": \"00:50:00\",\n    \"watchCount\": 1,\n    \"subtitles\": \"de\",\n    \"dubs\": \"original\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/watchHistories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"watchHistories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Preferences",
			"item": [
				{
					"name": "Check for add Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct preference structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('minAge').that.is.a('number');",
									"    pm.expect(response).to.have.property('seriesPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('filmsPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('viewingClassification').that.is.an('array');",
									"    pm.expect(response).to.have.property('profile').that.is.an('object');",
									"    pm.expect(response).to.have.property('genres').that.is.an('array');",
									"});",
									"",
									"// Test nested objects",
									"pm.test(\"Nested objects have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Profile validation",
									"    pm.expect(response.profile).to.have.property('id').that.is.a('string');",
									"    pm.expect(response.profile).to.have.property('image').that.is.a('string');",
									"    pm.expect(response.profile).to.have.property('dateOfBirth').that.is.a('string');",
									"    ",
									"    // Genres validation",
									"    if (response.genres.length > 0) {",
									"        response.genres.forEach(genre => {",
									"            pm.expect(genre).to.have.property('id').that.is.a('string');",
									"            pm.expect(genre).to.have.property('name').that.is.a('string');",
									"            pm.expect(genre).to.have.property('description').that.is.a('string');",
									"        });",
									"    }",
									"});",
									"",
									"// Test UUID formats",
									"pm.test(\"UUIDs are in correct format\", function () {",
									"    const response = pm.response.json();",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    ",
									"    pm.expect(response.id).to.match(uuidRegex);",
									"    pm.expect(response.profile.id).to.match(uuidRegex);",
									"    ",
									"    response.genres.forEach(genre => {",
									"        pm.expect(genre.id).to.match(uuidRegex);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profileId\": \"30477c72-02e6-4adf-8cf1-c99c214dd73e\",\n    \"minAge\": 0,\n    \"genres\": [\"4d9f0988-e87d-47f4-8094-7d57d35ccb64\", \"2d3ee124-2085-4f97-ac40-5a747986f546\"],\n    \"seriesPreferred\": true,\n    \"filmsPreferred\": false,\n    \"viewingClassification\": [\"G\", \"PG\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/preferences",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"preferences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid Preferences return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test array response structure",
									"pm.test(\"Response is an array of preferences\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    if (response.length > 0) {",
									"        response.forEach((preference, index) => {",
									"            pm.expect(preference).to.have.property('id').that.is.a('string');",
									"            pm.expect(preference).to.have.property('minAge').that.is.a('number');",
									"            pm.expect(preference).to.have.property('seriesPreferred').that.is.a('boolean');",
									"            pm.expect(preference).to.have.property('filmsPreferred').that.is.a('boolean');",
									"            pm.expect(preference).to.have.property('viewingClassification').that.is.an('array');",
									"            ",
									"            // Verify UUID format",
									"            pm.expect(preference.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"            ",
									"            // Verify minAge is non-negative",
									"            pm.expect(preference.minAge).to.be.at.least(0);",
									"            ",
									"            // Verify viewingClassification array contains strings",
									"            preference.viewingClassification.forEach((classification) => {",
									"                pm.expect(classification).to.be.a('string');",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									"// Updated schema validation",
									"const preferenceSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['id', 'minAge', 'seriesPreferred', 'filmsPreferred', 'viewingClassification'],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            minAge: { type: 'number', minimum: 0 },",
									"            seriesPreferred: { type: 'boolean' },",
									"            filmsPreferred: { type: 'boolean' },",
									"            viewingClassification: {",
									"                type: 'array',",
									"                items: { type: 'string' }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(preferenceSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/preferences",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"preferences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for return Preferences by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct preference structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('minAge').that.is.a('number');",
									"    pm.expect(response).to.have.property('seriesPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('filmsPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('viewingClassification').that.is.an('array');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify minAge is non-negative",
									"    pm.expect(response.minAge).to.be.at.least(0);",
									"    ",
									"    // Verify viewingClassification array",
									"    response.viewingClassification.forEach((classification) => {",
									"        pm.expect(classification).to.be.a('string');",
									"    });",
									"});",
									"",
									"// Updated schema",
									"const preferenceSchema = {",
									"    type: 'object',",
									"    required: ['id', 'minAge', 'seriesPreferred', 'filmsPreferred', 'viewingClassification'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        minAge: { type: 'number', minimum: 0 },",
									"        seriesPreferred: { type: 'boolean' },",
									"        filmsPreferred: { type: 'boolean' },",
									"        viewingClassification: {",
									"            type: 'array',",
									"            items: { type: 'string' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(preferenceSchema);",
									"});",
									"",
									"// Test 404 case",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.statusCode).to.equal(404);",
									"        pm.expect(response.message).to.equal(\"Preference not found\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/preferences/438c4f6d-eda5-41a6-8b86-03d58f732c80",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"preferences",
								"438c4f6d-eda5-41a6-8b86-03d58f732c80"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct preference structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('minAge').that.is.a('number');",
									"    pm.expect(response).to.have.property('seriesPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('filmsPreferred').that.is.a('boolean');",
									"    pm.expect(response).to.have.property('viewingClassification').that.is.an('array');",
									"    pm.expect(response).to.have.property('genres').that.is.an('array');",
									"});",
									"",
									"// Test data values",
									"pm.test(\"Data values are correct\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify minAge is non-negative",
									"    pm.expect(response.minAge).to.be.at.least(0);",
									"    ",
									"    // Verify genres structure",
									"    response.genres.forEach(genre => {",
									"        pm.expect(genre).to.have.property('id').that.is.a('string');",
									"        pm.expect(genre).to.have.property('name').that.is.a('string');",
									"        pm.expect(genre).to.have.property('description').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"minAge\": 12,\n    \"genres\": [\n        \"4d9f0988-e87d-47f4-8094-7d57d35ccb64\",\n        \"9bf6aef4-abf7-4511-8e5b-d53877c45df1\"\n    ],\n    \"seriesPreferred\": false,\n    \"filmsPreferred\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/preferences/c858cf97-b177-4506-952c-a83a446b414e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"preferences",
								"c858cf97-b177-4506-952c-a83a446b414e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/preferences/ea578ef7-2e54-446c-9ec5-e30a78ccfef2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"preferences",
								"ea578ef7-2e54-446c-9ec5-e30a78ccfef2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Check for add Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has required fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    pm.expect(requestBody).to.have.property('type').that.is.a('string');",
									"    pm.expect(requestBody).to.have.property('cost').that.is.a('number');",
									"    pm.expect(requestBody).to.have.property('currency').that.is.a('string');",
									"    pm.expect(requestBody).to.have.property('benefits').that.is.a('string');",
									"    ",
									"    // Verify cost is non-negative",
									"    pm.expect(requestBody.cost).to.be.at.least(0);",
									"    ",
									"    // Verify currency is a valid 3-letter code",
									"    pm.expect(requestBody.currency).to.match(/^[A-Z]{3}$/);",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct subscription structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('type').that.is.a('string');",
									"    pm.expect(response).to.have.property('cost').that.is.a('number');",
									"    pm.expect(response).to.have.property('currency').that.is.a('string');",
									"    pm.expect(response).to.have.property('benefits').that.is.a('string');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify cost is non-negative",
									"    pm.expect(response.cost).to.be.at.least(0);",
									"    ",
									"    // Verify currency is a valid 3-letter code",
									"    pm.expect(response.currency).to.match(/^[A-Z]{3}$/);",
									"});",
									"",
									"// Schema validation",
									"const subscriptionSchema = {",
									"    type: 'object',",
									"    required: ['id', 'type', 'cost', 'currency', 'benefits'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        type: { type: 'string' },",
									"        cost: { type: 'number', minimum: 0 },",
									"        currency: { type: 'string', pattern: '^[A-Z]{3}$' },",
									"        benefits: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(subscriptionSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Basic\",\n    \"cost\": 9.99,\n    \"currency\": \"USD\",\n    \"benefits\": \"1080 streaming,  ad-free\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/subscriptions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for valid Subscriptions return",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response is an array of subscriptions\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check if response is an array",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    // If array is not empty, check structure of each subscription",
									"    if (response.length > 0) {",
									"        response.forEach((subscription, index) => {",
									"            pm.expect(subscription, `Subscription at index ${index}`).to.have.property('id').that.is.a('string');",
									"            pm.expect(subscription, `Subscription at index ${index}`).to.have.property('type').that.is.a('string');",
									"            pm.expect(subscription, `Subscription at index ${index}`).to.have.property('cost').that.is.a('number');",
									"            pm.expect(subscription, `Subscription at index ${index}`).to.have.property('currency').that.is.a('string');",
									"            pm.expect(subscription, `Subscription at index ${index}`).to.have.property('benefits').that.is.a('string');",
									"            ",
									"            // Verify UUID format",
									"            pm.expect(subscription.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"            ",
									"            // Verify cost is non-negative",
									"            pm.expect(subscription.cost).to.be.at.least(0);",
									"            ",
									"            // Verify currency is a valid 3-letter code",
									"            pm.expect(subscription.currency).to.match(/^[A-Z]{3}$/);",
									"        });",
									"    }",
									"});",
									"",
									"// Schema validation",
									"const subscriptionSchema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['id', 'type', 'cost', 'currency', 'benefits'],",
									"        properties: {",
									"            id: { type: 'string', format: 'uuid' },",
									"            type: { type: 'string' },",
									"            cost: { type: 'number', minimum: 0 },",
									"            currency: { type: 'string', pattern: '^[A-Z]{3}$' },",
									"            benefits: { type: 'string' }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(subscriptionSchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/subscriptions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for  Subscriptions return by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct subscription structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Required fields with type checking",
									"    pm.expect(response).to.have.property('id').that.is.a('string');",
									"    pm.expect(response).to.have.property('type').that.is.a('string');",
									"    pm.expect(response).to.have.property('cost').that.is.a('number');",
									"    pm.expect(response).to.have.property('currency').that.is.a('string');",
									"    pm.expect(response).to.have.property('benefits').that.is.a('string');",
									"    ",
									"    // Verify UUID format",
									"    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
									"    ",
									"    // Verify cost is non-negative",
									"    pm.expect(response.cost).to.be.at.least(0);",
									"    ",
									"    // Verify currency is a valid 3-letter code",
									"    pm.expect(response.currency).to.match(/^[A-Z]{3}$/);",
									"});",
									"",
									"// Schema validation",
									"const subscriptionSchema = {",
									"    type: 'object',",
									"    required: ['id', 'type', 'cost', 'currency', 'benefits'],",
									"    properties: {",
									"        id: { type: 'string', format: 'uuid' },",
									"        type: { type: 'string' },",
									"        cost: { type: 'number', minimum: 0 },",
									"        currency: { type: 'string', pattern: '^[A-Z]{3}$' },",
									"        benefits: { type: 'string' }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(subscriptionSchema);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/subscriptions/03d50416-e9c7-4025-a44a-3e62e3ab0e39",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"subscriptions",
								"03d50416-e9c7-4025-a44a-3e62e3ab0e39"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for update Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Request validation",
									"pm.test(\"Request has valid update fields\", function() {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    ",
									"    if (requestBody.type !== undefined) {",
									"        pm.expect(requestBody.type).to.be.a('string');",
									"    }",
									"    ",
									"    if (requestBody.cost !== undefined) {",
									"        pm.expect(requestBody.cost).to.be.a('number');",
									"        pm.expect(requestBody.cost).to.be.at.least(0);",
									"    }",
									"    ",
									"    if (requestBody.currency !== undefined) {",
									"        pm.expect(requestBody.currency).to.be.a('string');",
									"        pm.expect(requestBody.currency).to.match(/^[A-Z]{3}$/);",
									"    }",
									"    ",
									"    if (requestBody.benefits !== undefined) {",
									"        pm.expect(requestBody.benefits).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct update structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM update response structure",
									"    pm.expect(response).to.have.property('generatedMaps').that.is.an('array');",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify update was successful",
									"pm.test(\"Update was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"premium-plus\",\n    \"cost\": 19.99,\n    \"currency\": \"EUR\",\n    \"benefits\": \"4K streaming, multiple devices, ad-free, offline downloads\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/subscriptions/03d50416-e9c7-4025-a44a-3e62e3ab0e39",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"subscriptions",
								"03d50416-e9c7-4025-a44a-3e62e3ab0e39"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for delete Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct delete structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check TypeORM delete response structure",
									"    pm.expect(response).to.have.property('raw').that.is.an('array');",
									"    pm.expect(response).to.have.property('affected').that.is.a('number');",
									"});",
									"",
									"// Verify deletion was successful",
									"pm.test(\"Deletion was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.affected).to.be.at.least(1);",
									"});",
									"",
									"// Error case test",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Not found response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Not Found');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(404);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/subscriptions/b383a99e-aec9-4dcd-bb80-f5ed9d4273b9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"subscriptions",
								"b383a99e-aec9-4dcd-bb80-f5ed9d4273b9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Upload",
			"item": [
				{
					"name": "Check for video upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic response validation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response structure validation",
									"pm.test(\"Response has correct video upload structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check if response has videoUrl",
									"    pm.expect(response).to.have.property('videoUrl').that.is.a('string');",
									"    ",
									"    // Verify URL format",
									"    pm.expect(response.videoUrl).to.match(/^https?:\\/\\/.+/);",
									"    ",
									"    // Verify it's a Cloudinary URL",
									"    pm.expect(response.videoUrl).to.include('cloudinary.com');",
									"});",
									"",
									"// Schema validation",
									"const uploadResponseSchema = {",
									"    type: 'object',",
									"    required: ['videoUrl'],",
									"    properties: {",
									"        videoUrl: { ",
									"            type: 'string',",
									"            format: 'uri'",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(uploadResponseSchema);",
									"});",
									"",
									"// Error case tests",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Bad request response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Bad Request');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(400);",
									"    });",
									"}",
									"",
									"if (pm.response.code === 413) {",
									"    pm.test(\"File too large response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error').that.equals('Payload Too Large');",
									"        pm.expect(response).to.have.property('statusCode').that.equals(413);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efd4e09-c6ae-4a30-ab35-3ac7daf39eb4"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/upload/video",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"upload",
								"video"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for image upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has correct image upload structure\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Check imageUrl property",
									"    pm.expect(response).to.have.property('imageUrl').that.is.a('string');",
									"    ",
									"    // Verify URL format",
									"    pm.expect(response.imageUrl).to.match(/^https?:\\/\\/.+/);",
									"    ",
									"    // Verify Cloudinary URL",
									"    pm.expect(response.imageUrl).to.include('cloudinary.com');",
									"});",
									"",
									"// Schema validation",
									"const uploadResponseSchema = {",
									"    type: 'object',",
									"    required: ['imageUrl'],",
									"    properties: {",
									"        imageUrl: { ",
									"            type: 'string',",
									"            format: 'uri'",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response matches schema', function() {",
									"    pm.response.to.have.jsonSchema(uploadResponseSchema);",
									"});",
									"",
									"// Test 400 Bad Request",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Bad request response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error', 'Bad Request');",
									"        pm.expect(response).to.have.property('statusCode', 400);",
									"    });",
									"}",
									"",
									"// Test 413 File Too Large",
									"if (pm.response.code === 413) {",
									"    pm.test(\"File too large response is correct\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('error', 'Payload Too Large');",
									"        pm.expect(response).to.have.property('statusCode', 413);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZDA0ZTA4OC1jMDFhLTRiMjItYTk0ZS00YjBjOTExYWUzNTEiLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInJvbGUiOiJTZW5pb3IiLCJpYXQiOjE3MzcwNTI0MzMsImV4cCI6MTczNzY1NzIzM30.69_wVYkGhGzpGcXf1L5z4LZCwEpftyWOpA7y1cb9h5c",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efd4e0c-6d38-4b10-9892-1e422dab38e6"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/upload/image",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"upload",
								"image"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}